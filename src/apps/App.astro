---
// Layout component for the entire application
import Header from "@/components/layouts/Header.astro";
import Main from "@/components/layouts/Main.astro";
import Footer from "@/components/layouts/Footer.astro";

// Container component to wrap the layout
import Container from "@/components/partials/Container.astro";
---

<div id="canvas-container"></div>

<Container>
  <Header />
  <Main />
  <Footer />
</Container>

<script>
  import * as THREE from "three";
  import { OrbitControls } from "three/addons/controls/OrbitControls.js";

  const canvasContainer = document.getElementById("canvas-container");

  // Scene
  const scene = new THREE.Scene();
  scene.background = new THREE.Color(0x0a0a0a);

  // Camera
  const camera = new THREE.PerspectiveCamera(
    75,
    window.innerWidth / window.innerHeight,
    0.1,
    1000
  );
  camera.position.z = 30;

  // Renderer
  const renderer = new THREE.WebGLRenderer({ antialias: true });
  renderer.setSize(window.innerWidth, window.innerHeight);
  renderer.setPixelRatio(window.devicePixelRatio);
  canvasContainer && canvasContainer.appendChild(renderer.domElement);

  // Controls
  const controls = new OrbitControls(camera, renderer.domElement);
  controls.enableZoom = false;
  controls.enablePan = false;
  controls.autoRotate = true;
  controls.autoRotateSpeed = 0.5;

  // Lights
  const ambientLight = new THREE.AmbientLight(0x404040);
  scene.add(ambientLight);

  const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
  directionalLight.position.set(1, 1, 1);
  scene.add(directionalLight);

  const pointLight = new THREE.PointLight(0x00ffff, 1, 100);
  pointLight.position.set(5, 5, 5);
  scene.add(pointLight);

  const pointLight2 = new THREE.PointLight(0xfc00ff, 1, 100);
  pointLight2.position.set(-5, -5, -5);
  scene.add(pointLight2);

  // Geometry
  const geometry = new THREE.IcosahedronGeometry(10, 1);
  const material = new THREE.MeshPhongMaterial({
    color: 0x111111,
    wireframe: true,
    emissive: 0x00ffff,
    emissiveIntensity: 0.2,
    transparent: true,
    opacity: 0.8,
    shininess: 100,
  });

  const mesh = new THREE.Mesh(geometry, material);
  scene.add(mesh);

  // Particles
  const particlesGeometry = new THREE.BufferGeometry();
  const particlesCount = 1000;

  const posArray = new Float32Array(particlesCount * 3);

  for (let i = 0; i < particlesCount * 3; i++) {
    posArray[i] = (Math.random() - 0.5) * 50;
  }

  particlesGeometry.setAttribute(
    "position",
    new THREE.BufferAttribute(posArray, 3)
  );

  const particlesMaterial = new THREE.PointsMaterial({
    size: 0.1,
    color: 0x00ffff,
    transparent: true,
    opacity: 0.8,
  });

  const particlesMesh = new THREE.Points(particlesGeometry, particlesMaterial);
  scene.add(particlesMesh);

  // Resize handler
  window.addEventListener("resize", () => {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
  });

  // Animation loop
  function animate() {
    requestAnimationFrame(animate);

    mesh.rotation.x += 0.002;
    mesh.rotation.y += 0.003;

    particlesMesh.rotation.x += 0.0005;
    particlesMesh.rotation.y += 0.0005;

    controls.update();
    renderer.render(scene, camera);
  }

  animate();
</script>

<style>
  #canvas-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
  }
</style>
